'use client';

import React from 'react';
import { useParameterQuestions, useParameterAnswers, useCaseCreationStore } from '@/stores/caseCreationStore';
import { ParameterQuestion } from '@/types/caseCreation';

const ParameterQuestionsStep: React.FC = () => {
  const parameterQuestions = useParameterQuestions();
  const parameterAnswers = useParameterAnswers();
  const { updateParameterAnswer } = useCaseCreationStore();

  // Mock questions - these would be generated by AI based on the learning context
  const mockQuestions: ParameterQuestion[] = [
    {
      id: 'patient_age',
      category: 'clinical_scenario',
      question: 'What age range would be most appropriate for this case?',
      type: 'select',
      options: ['Pediatric (0-17)', 'Young Adult (18-35)', 'Middle Age (36-65)', 'Elderly (65+)'],
      required: true
    },
    {
      id: 'setting',
      category: 'clinical_scenario',
      question: 'What clinical setting should this case take place in?',
      type: 'select',
      options: ['Emergency Department', 'Intensive Care Unit', 'Medical Ward', 'Outpatient Clinic', 'Operating Room'],
      required: true
    },
    {
      id: 'complexity_factors',
      category: 'complexity',
      question: 'Which complexity factors should be included? (Select all that apply)',
      type: 'multiselect',
      options: ['Comorbidities', 'Family dynamics', 'Communication barriers', 'Resource limitations', 'Ethical dilemmas'],
      required: false
    },
    {
      id: 'critical_thinking',
      category: 'assessment',
      question: 'How much emphasis should be placed on critical thinking and problem-solving?',
      type: 'range',
      required: true
    },
    {
      id: 'team_dynamics',
      category: 'resources',
      question: 'Should this case emphasize interprofessional team dynamics?',
      type: 'boolean',
      required: true
    },
    {
      id: 'special_equipment',
      category: 'resources',
      question: 'Describe any special equipment or resources needed for this case:',
      type: 'text',
      required: false
    }
  ];

  const handleAnswerChange = (questionId: string, value: any) => {
    updateParameterAnswer(questionId, value);
  };

  const renderQuestionInput = (question: ParameterQuestion) => {
    const value = parameterAnswers[question.id];

    switch (question.type) {
      case 'text':
        return (
          <textarea
            value={value || ''}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            rows={3}
            placeholder="Enter your answer..."
          />
        );

      case 'select':
        return (
          <select
            value={value || ''}
            onChange={(e) => handleAnswerChange(question.id, e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Select an option</option>
            {question.options?.map((option, index) => (
              <option key={index} value={option}>
                {option}
              </option>
            ))}
          </select>
        );

      case 'multiselect':
        return (
          <div className="space-y-2">
            {question.options?.map((option, index) => (
              <label key={index} className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={(value || []).includes(option)}
                  onChange={(e) => {
                    const currentValues = value || [];
                    const newValues = e.target.checked
                      ? [...currentValues, option]
                      : currentValues.filter((v: string) => v !== option);
                    handleAnswerChange(question.id, newValues);
                  }}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <span className="text-gray-700">{option}</span>
              </label>
            ))}
          </div>
        );

      case 'range':
        return (
          <div className="space-y-2">
            <input
              type="range"
              min="1"
              max="5"
              value={value || 3}
              onChange={(e) => handleAnswerChange(question.id, parseInt(e.target.value))}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
            <div className="flex justify-between text-sm text-gray-500">
              <span>Low (1)</span>
              <span className="font-medium text-blue-600">Current: {value || 3}</span>
              <span>High (5)</span>
            </div>
          </div>
        );

      case 'boolean':
        return (
          <div className="flex space-x-4">
            <label className="flex items-center space-x-2">
              <input
                type="radio"
                name={question.id}
                value="true"
                checked={value === true}
                onChange={() => handleAnswerChange(question.id, true)}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              />
              <span className="text-gray-700">Yes</span>
            </label>
            <label className="flex items-center space-x-2">
              <input
                type="radio"
                name={question.id}
                value="false"
                checked={value === false}
                onChange={() => handleAnswerChange(question.id, false)}
                className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
              />
              <span className="text-gray-700">No</span>
            </label>
          </div>
        );

      default:
        return null;
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'clinical_scenario':
        return (
          <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
          </svg>
        );
      case 'resources':
        return (
          <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
        );
      case 'complexity':
        return (
          <svg className="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
          </svg>
        );
      case 'assessment':
        return (
          <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        );
      default:
        return null;
    }
  };

  const getCategoryTitle = (category: string) => {
    switch (category) {
      case 'clinical_scenario':
        return 'Clinical Scenario';
      case 'resources':
        return 'Resources & Equipment';
      case 'complexity':
        return 'Complexity & Challenges';
      case 'assessment':
        return 'Assessment Focus';
      default:
        return category;
    }
  };

  const questionsByCategory = mockQuestions.reduce((acc, question) => {
    if (!acc[question.category]) {
      acc[question.category] = [];
    }
    acc[question.category].push(question);
    return acc;
  }, {} as Record<string, ParameterQuestion[]>);

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="space-y-8">
        {/* Header */}
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            Case Parameters & Preferences
          </h2>
          <p className="text-gray-600">
            Answer these AI-generated questions to help customize your simulation case to your specific needs.
          </p>
        </div>

        {/* AI Generation Notice */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-start">
            <svg className="w-5 h-5 text-blue-500 mt-0.5 mr-3" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
            </svg>
            <div>
              <h4 className="text-sm font-medium text-blue-800 mb-1">AI-Generated Questions</h4>
              <p className="text-sm text-blue-700">
                These questions were generated based on your learning objectives and case context. 
                Your answers will help create a more targeted and effective simulation.
              </p>
            </div>
          </div>
        </div>

        {/* Questions by Category */}
        {Object.entries(questionsByCategory).map(([category, questions]) => (
          <div key={category} className="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                {getCategoryIcon(category)}
                <h3 className="text-lg font-semibold text-gray-900">
                  {getCategoryTitle(category)}
                </h3>
              </div>
            </div>
            
            <div className="p-6 space-y-6">
              {questions.map((question, index) => (
                <div key={question.id} className="space-y-3">
                  <div className="flex items-start justify-between">
                    <label className="block text-sm font-medium text-gray-900">
                      {question.question}
                      {question.required && <span className="text-red-500 ml-1">*</span>}
                    </label>
                    <span className="text-xs text-gray-500 ml-4">
                      Question {index + 1} of {questions.length}
                    </span>
                  </div>
                  
                  {renderQuestionInput(question)}
                </div>
              ))}
            </div>
          </div>
        ))}

        {/* Progress Summary */}
        <div className="bg-gray-50 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-700">
              Questions Answered
            </span>
            <span className="text-sm text-gray-600">
              {Object.keys(parameterAnswers).length} of {mockQuestions.length}
            </span>
          </div>
          <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ 
                width: `${(Object.keys(parameterAnswers).length / mockQuestions.length) * 100}%` 
              }}
            />
          </div>
        </div>

        {/* Help Text */}
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-start">
            <svg className="w-5 h-5 text-yellow-500 mt-0.5 mr-3" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
            <div>
              <h4 className="text-sm font-medium text-yellow-800 mb-1">Need Help?</h4>
              <p className="text-sm text-yellow-700">
                Don't worry if you're unsure about some answers. You can always come back and modify these 
                parameters, and our AI will adapt the case accordingly.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ParameterQuestionsStep; 